#Hurdle 1
def turn_right():
    turn_left()
    turn_left()
    turn_left()
    
def jum():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

jum()
jum()
jum()
jum()
jum()
jum()

#Hurdle 2
def turn_right():
    turn_left()
    turn_left()
    turn_left()
    
def jum():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
while not at_goal():
    jum()


#Hurdle 3
def turn_right():
    turn_left()
    turn_left()
    turn_left()

def lompat():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    move()
    
while not at_goal():#diulangi selama tidak di goal
    if wall_in_front():
        lompat()
    else:
        move()

#hurdle 4
def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    turn_left()
    while wall_on_right():
        move()
        
    turn_right()
    move()
    turn_right()

while front_is_clear():
        move()
    turn_left()
        

while not at_goal():
    if wall_in_front():
        jump()
    else:
        move()

#Maze
def turn_right():
    turn_left()
    turn_left()
    turn_left()
    
while front_is_clear():  #perulangan while ini adalah untuk menggerakkan reeborg agar berpindah ke tembok terdekat agar dia tidak terjebak dalam lingkaran tak terbatas dimana dia mempunyai sisi kanan bersih di keempat arah (Ini terjadi saat dia berada di tengah labirin)
    move()
turn_left()

while not at_goal():
    if right_is_clear():
        turn_right()
        move()
elif front_is_clear():
        move()
    else:
        turn_left()
